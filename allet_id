{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- https://hackernoon.com/learn-blockchains-by-building-one-117428612f46\n",
    "- http://adilmoujahid.com/posts/2018/03/intro-blockchain-bitcoin-python/\n",
    "- [Blockchain Demo](https://anders.com/blockchain/blockchain.html)\n",
    "- [ipynb\\_playground/dumbcoin\\.ipynb at master · julienr/ipynb\\_playground](https://github.com/julienr/ipynb_playground/blob/master/bitcoin/dumbcoin/dumbcoin.ipynb)\n",
    "- [Contributors to adilmoujahid/blockchain\\-python\\-tutorial](https://github.com/adilmoujahid/blockchain-python-tutorial/graphs/contributors)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# walletの実装\n",
    "- adress\n",
    "- balance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Wallet:\n",
    "    def __init__(self, wallet_id, balance):\n",
    "        self.wallet_id = wallet_id\n",
    "        self.balance = balance\n",
    "    def pay(self, amount):\n",
    "        self.balance -= amount\n",
    "    def receive(self, amount):\n",
    "        self.balance += amount"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## demo1: シンプルな取引"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [],
   "source": [
    "def deal(sender, receiver, amount):\n",
    "    sender.pay(amount)\n",
    "    receiver.receive(amount)\n",
    "    \n",
    "alice=Wallet(1,10)\n",
    "bob=Wallet(2,20)\n",
    "\n",
    "value=5\n",
    "deal(alice, bob, value)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- 取引を公正に行うにはどうしたらいいだろうか?\n",
    "    - 信頼のある第三者がdealをする?\n",
    "- dealを公正に行えば，不正はおこらない?\n",
    "    - No. デジタルデータは容易に複製できる\n",
    "    - douoble spending"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## transactionの実装\n",
    "- transactionをすべて記録しておく\n",
    "- ledgerが\"正しい\"ならば，double spendingは防ぐことができる\n",
    "    - 今まですべての取引が記録されているので，`balence`の不正は検出することができる\n",
    "- transaction\n",
    "    - sender adress\n",
    "    - receiver adress\n",
    "    - value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": [
    "from typing import NamedTuple\n",
    "class Transaction(NamedTuple):\n",
    "    sender_adress: int\n",
    "    receiver_adress: int\n",
    "    value: float"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "t=Transaction(1,2,1.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Ledger の実装\n",
    "- transactionを記録しておく台帳\n",
    "    - chain状にtransactionを保持しておく"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Ledger(list):\n",
    "    def __init__(self):\n",
    "        # no init args is accepted\n",
    "        super().__init__() \n",
    "    def append(self, value):\n",
    "        # only accept `Transaction` to append\n",
    "        if not isinstance(value, Transaction):\n",
    "            raise ValueError\n",
    "        super().append(value)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Walletの改良\n",
    "- valueは保持しないようにする\n",
    "- すべてのtransactionをたどることで残高はわかる"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Wallet:\n",
    "    def __init__(self, wallet_id):\n",
    "        self.wallet_id = wallet_id"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Demo2: Ledgerと transactionを用いた取引"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [],
   "source": [
    "ledger=Ledger()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Transaction(sender_adress=0, receiver_adress=1, value=10),\n",
       " Transaction(sender_adress=0, receiver_adress=2, value=20),\n",
       " Transaction(sender_adress=1, receiver_adress=2, value=5)]"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "alice=Wallet(1)\n",
    "bob=Wallet(2)\n",
    "\n",
    "# initialize balance of alice's wallet via creating new transactin\n",
    "ledger.append(Transaction(0,1,10)) # alice's balance = 10\n",
    "ledger.append(Transaction(0,2,20)) # bob's balance = 20\n",
    "\n",
    "# Alice sends 5 to Bob\n",
    "value=5\n",
    "transaction=Transaction(1, 2, value)\n",
    "ledger.append(transaction)\n",
    "ledger"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- transactionは誰が発行するのか?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 公開鍵暗号と電子署名を用いたtransactionの発行\n",
    "- Transactionはsenderが発行する\n",
    "    - wallet adressを知られると不正にTransactionを発行されてしまうのでは?\n",
    "- 電子署名を用いる\n",
    "    - 電子署名の公開鍵はどのように扱う?\n",
    "- 公開鍵をWalletのadressとする!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Walletの改良\n",
    "- RSAによる公開鍵 - 秘密鍵を実装する"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [],
   "source": [
    "import Crypto\n",
    "import Crypto.Random\n",
    "from Crypto.Hash import SHA\n",
    "from Crypto.PublicKey import RSA\n",
    "from Crypto.Signature import PKCS1_v1_5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [],
   "source": [
    "import binascii"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [],
   "source": [
    "key=RSA.generate(1024)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Wallet:\n",
    "    def __init__(self, wallet_id):\n",
    "        self.adress = wallet_id\n",
    "    @staticmethod\n",
    "    def decode_key(key):\n",
    "        return binascii.hexlify(key.exportKey(\"DER\")).decode(\"ascii\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
